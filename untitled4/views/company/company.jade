extends company_des
block scripts
    script(src = '/javascripts/cytoscape.js')
    script(src="//d3plus.org/js/d3.js")
    script(src="//d3plus.org/js/d3plus.js")
block cytoscape
    div(id='graph')
    script.
        //(function () {
        //    var companys = '!{companyList}'.split(',');
        //    // Fake JSON data
        //    var json = {
        //        "companys": {
        //            /*
        //            "Samsung": [],
        //            "Hyundai Motors": [],
        //            "SK": [],
        //            "LG": [],
        //            "KT": [],
        //            "Others": []
        //            */
        //        }
        //    }
        //
        //    for (var i = 0; i < companys.length; i++) {
        //        json.companys[companys[i]] = 100;
        //    }
        //
        //    var width = $('#left').width();
        //    var height = $('#left').height();
        //
        //    var svg = d3.select('#graph').append('svg')
        //        .attr('width', width)
        //        .attr('height', height);
        //
        //    var bubble = d3.layout.pack()
        //        .size([width, height])
        //        .value(function (d) {
        //            return d.size;
        //        })
        //        .padding(10);
        //
        //    // generate data with calculated layout values
        //    var nodes = bubble.nodes(processData(json))
        //        .filter(function (d) {
        //            return !d.children;
        //        }); // filter out the outer bubble
        //
        //    var groups = svg.selectAll("g")
        //        .data(nodes)
        //        .enter()
        //        .append("g")
        //        .on('click', function () {
        //            console.log(d3.select(this).text());
        //            location.href = '/company/job/' + d3.select(this).text().replace(/ /g, "_");
        //        });
        //
        //    var circles = groups.append('circle')
        //        .attr('transform', function (d) {
        //            return 'translate(' + d.x + ',' + d.y + ')';
        //        })
        //        .attr('r', function (d) {
        //            return d.r;
        //        })
        //        .attr('class', function (d) {
        //            return d.className;
        //        });
        //
        //    var label = groups.append('text')
        //        .text(function (d) {
        //            return d.name.replace(/\_/g, " ");
        //        })
        //        .attr({
        //            "alignment-baseline": "middle",
        //            "text-anchor": "middle"
        //        })
        //        .attr("x", function (d) {
        //            return d.x;
        //        })
        //        .attr("y", function (d) {
        //            return d.y;
        //        })
        //        .attr("font-family", "sans-serif")
        //        .attr("font-size", "20px")
        //        .attr("fill", "white");
        //
        //    function processData(data) {
        //        var obj = data.companys;
        //
        //        var newDataSet = [];
        //
        //        for (var prop in obj) {
        //            newDataSet.push({name: prop, className: prop.toLowerCase(), size: obj[prop]});
        //        }
        //        return {children: newDataSet};
        //    }
        //
        //})();

        (function () {
            var companys = '!{companyList}'.split(',');

            var width = $('#left').width(),
                height = $('#left').height(),
                padding = 3, // separation between same-color nodes
                clusterPadding = 10, // separation between different-color nodes
                maxRadius = width / 20;

            var n = companys.length, // total number of nodes
                m = 6; // number of distinct clusters

            var color = d3.scale.category10()
                .domain(d3.range(m));

            // The largest node for each cluster.
            var clusters = new Array(m);
            console.log(companys)
            var i = 0;
            var nodes = d3.range(n).map(function () {
                var clusterName;
                while (i < n) {
                    if (companys[i].indexOf('KT') != -1) {
                        clusterName = 1;
                    } else if (companys[i].indexOf('Samsung_') != -1) {
                        clusterName = 2;
                    } else if (companys[i].indexOf('LG_') != -1) {
                        clusterName = 3;
                    } else if (companys[i].indexOf('SK_') != -1) {
                        clusterName = 4;
                    } else if (companys[i].indexOf('Hyundai_') != -1) {
                        clusterName = 5;
                    } else {
                        clusterName = 6;
                    }
                    var r = maxRadius,
                        d = {
                            name: companys[i],
                            cluster: clusterName,
                            radius: r,
                            x: Math.cos(i / m * 2 * Math.PI) * 200 + width / 2 + Math.random(),
                            y: Math.sin(i / m * 2 * Math.PI) * 200 + Math.random()
                        };
                    if (!clusters[i] || (r > clusters[i].radius)) clusters[i] = d;
                    i++;
                    return d;
                }
            });

            var force = d3.layout.force()
                .nodes(nodes)
                .size([width, height])
                .gravity(.02)
                .charge(0)
                .on("tick", tick)
                .start();

            var svg = d3.select("#left").append("svg")
                .attr("width", width)
                .attr("height", height);

            var groups = svg.selectAll("g")
                .data(nodes)
                .enter().append("g")
                .on('click', function () {
                    location.href = '/company/job/' + d3.select(this).text().replace(/ /g, "_");
                });

            var node = groups.append('circle')
            /*
            var node = svg.selectAll("circle")
                .data(nodes)
                .enter().append("circle")
                */
                .style("fill", function (d) {
                    return color(d.cluster);
                })
                .call(force.drag);

            var label = groups.append('text')
                .text(function (d) {
                    var showed = d.name.replace(/\_/g, " ");
                    return showed;
                })
                .attr({
                    "alignment-baseline": "middle",
                    "text-anchor": "middle"
                })
                .attr("font-family", "sans-serif")
                .attr("font-size", "20px")
                .attr("fill", "white");

            node.transition()
                .duration(750)
                .delay(function (d, i) {
                    return i * 5;
                })
                .attrTween("r", function (d) {
                    var i = d3.interpolate(0, d.radius);
                    return function (t) {
                        return d.radius = i(t);
                    };
                });

            function tick(e) {
                node
                    .each(cluster(10 * e.alpha * e.alpha))
                    .each(collide(.5))
                    .attr("cx", function (d) {
                        return d.x;
                    })
                    .attr("cy", function (d) {
                        return d.y;
                    });
                label
                    .each(cluster(10 * e.alpha * e.alpha))
                    .each(collide(.5))
                    .attr("x", function (d) {
                        return d.x;
                    })
                    .attr("y", function (d) {
                        return d.y;
                    });

            }

            // Move d to be adjacent to the cluster node.
            function cluster(alpha) {
                return function (d) {
                    var cluster = clusters[d.cluster];
                    if (cluster === d) return;
                    var x = d.x - cluster.x,
                        y = d.y - cluster.y,
                        l = Math.sqrt(x * x + y * y),
                        r = d.radius + cluster.radius;
                    if (l != r) {
                        l = (l - r) / l * alpha;
                        d.x -= x *= l;
                        d.y -= y *= l;
                        cluster.x += x;
                        cluster.y += y;
                    }
                };
            }

            // Resolves collisions between d and all other circles.
            function collide(alpha) {
                var quadtree = d3.geom.quadtree(nodes);
                return function (d) {
                    var r = d.radius + maxRadius + Math.max(padding, clusterPadding),
                        nx1 = d.x - r,
                        nx2 = d.x + r,
                        ny1 = d.y - r,
                        ny2 = d.y + r;
                    quadtree.visit(function (quad, x1, y1, x2, y2) {
                        if (quad.point && (quad.point !== d)) {
                            var x = d.x - quad.point.x,
                                y = d.y - quad.point.y,
                                l = Math.sqrt(x * x + y * y),
                                r = d.radius + quad.point.radius + (d.cluster === quad.point.cluster ? padding : clusterPadding);
                            if (l < r) {
                                l = (l - r) / l * alpha;
                                d.x -= x *= l;
                                d.y -= y *= l;
                                quad.point.x += x;
                                quad.point.y += y;
                            }
                        }
                        return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
                    });
                };
            }
        })();

            //window.onload = function () {
            //    var cy = cytoscape({
            //        container: $('#left'),
            //        elements: [],
            //        style: [
            //            {
            //                selector: 'node',
            //                style: {
            //                    shape: 'star',
            //                    'text-valign': 'center',
            //                    'text-outline-width': 2,
            //                    'text-outline-color': '#3366FF',
            //                    color: 'white',
            //                    'background-color': '#3366FF',
            //                    label: 'data(name)',
            //                    width: '100',
            //                    height: '100',
            //                    'background-fit': 'cover'
            //                }
            //            }]
            //    });
            //    var list = '
            //
            //
            //
            //
            //
        //
        //#{companyList}'.split(', ');
        //    for (var i in list) {
        //        cy.add({
        //            data: {id: list[i], name: list[i].replace(/\_/g, " ")}
        //        });
        //    }
        //    cy.layout({
        //        name: 'grid'
        //    });
        //
        //    cy.on('tap', 'node', function () {
        //        try {
        //            var select = this.data('id');
        //            location.href = '/company/job/' + select;
        //        } catch (e) {
        //            //error catch
        //        }
        //    });
        //    cy.on('mouseover', 'node', function () {
        //        try {
        //            var content = this.data('name');
        //            $('.document').html('<div id="result">' + content + '</div>');
        //        } catch (e) {
        //            console.log(e);
        //        }
        //    });
        //};
